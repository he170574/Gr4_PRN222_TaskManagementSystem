@page
@model CMS2.Pages.User.ProfileModel
@{
    Layout = "_Layout";
    ViewData["HideFooter"] = true;
}

<style>
    @if (ViewData["HideFooter"] != null && (bool)ViewData["HideFooter"])
    {
        <text>
            footer, .footer, .text-muted, .border-top, .navbar, nav, header, .footer-links, .container > header, .container > nav {
                display: none !important;
            }
        </text>
    }

    body {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
    }

    .glass-effect {
        backdrop-filter: blur(20px);
        background: rgba(255, 255, 255, 0.95);
        border: 1px solid rgba(255, 255, 255, 0.3);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
    }

    .profile-container {
        animation: slideUp 0.8s ease-out;
    }

    @@keyframes slideUp {
        from {
            opacity: 0;
            transform: translateY(30px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .avatar-section {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 2rem;
    }

    .avatar-circle {
        width: 120px;
        height: 120px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 3rem;
        color: white;
        font-weight: bold;
        box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
        position: relative;
        overflow: hidden;
    }

    .avatar-circle::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: linear-gradient(45deg, transparent, rgba(255,255,255,0.3), transparent);
        animation: shimmer 2s infinite;
    }

    @@keyframes shimmer {
        0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
        100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
    }

    .info-card {
        background: white;
        border-radius: 1rem;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);
        border-left: 4px solid;
        transition: all 0.3s ease;
    }

    .info-card:hover {
        transform: translateX(4px);
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    }

    .info-card.username { border-left-color: #3b82f6; }
    .info-card.email { border-left-color: #10b981; }
    .info-card.role { border-left-color: #f59e0b; }
    .info-card.created { border-left-color: #8b5cf6; }

    .form-section {
        background: white;
        border-radius: 1.5rem;
        padding: 2rem;
        box-shadow: 0 8px 30px rgba(0, 0, 0, 0.08);
        margin-top: 2rem;
    }

    .form-group {
        position: relative;
        margin-bottom: 2rem;
    }

    .form-label {
        color: #374151;
        font-size: 0.875rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        display: flex;
        align-items: center;
    }

    .form-label i {
        margin-right: 0.5rem;
        width: 16px;
    }

    .form-input {
        width: 100%;
        padding: 1rem;
        border-radius: 0.75rem;
        border: 2px solid #e5e7eb;
        outline: none;
        font-size: 1rem;
        transition: all 0.3s ease;
        background: #f9fafb;
    }

    .form-input:focus {
        border-color: #6366f1;
        background: white;
        box-shadow: 0 0 0 4px rgba(99, 102, 241, 0.1);
        transform: translateY(-2px);
    }

    .form-input[readonly] {
        background: #f3f4f6;
        color: #6b7280;
        cursor: not-allowed;
    }

    .password-group {
        position: relative;
    }

    .password-toggle {
        position: absolute;
        right: 1rem;
        top: 50%;
        transform: translateY(-50%);
        cursor: pointer;
        padding: 0.5rem;
        border-radius: 0.5rem;
        transition: all 0.2s ease;
        color: #6b7280;
    }

    .password-toggle:hover {
        background: #f3f4f6;
        color: #374151;
    }

    .btn-update {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 1rem 2rem;
        border-radius: 0.75rem;
        border: none;
        font-weight: 600;
        font-size: 1rem;
        cursor: pointer;
        transition: all 0.3s ease;
        width: 100%;
        position: relative;
        overflow: hidden;
    }

    .btn-update:hover {
        transform: translateY(-2px);
        box-shadow: 0 10px 30px rgba(102, 126, 234, 0.4);
    }

    .btn-update:active {
        transform: translateY(0);
    }

    .btn-update::before {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
        transition: left 0.5s ease;
    }

    .btn-update:hover::before {
        left: 100%;
    }

    .success-message {
        background: linear-gradient(135deg, #10b981 0%, #059669 100%);
        color: white;
        padding: 1rem;
        border-radius: 0.75rem;
        margin-bottom: 1.5rem;
        display: flex;
        align-items: center;
        animation: slideDown 0.5s ease-out;
    }

    @@keyframes slideDown {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .error-message {
        background: linear-gradient(135deg, #ef4444 0%, #dc2626 100%);
        color: white;
        padding: 1rem;
        border-radius: 0.75rem;
        margin-top: 1rem;
        display: flex;
        align-items: center;
    }

    .back-button {
        display: inline-flex;
        align-items: center;
        padding: 0.75rem 1.5rem;
        background: rgba(255, 255, 255, 0.2);
        color: white;
        text-decoration: none;
        border-radius: 0.75rem;
        margin-bottom: 2rem;
        transition: all 0.3s ease;
        font-weight: 500;
    }

    .back-button:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: translateX(-4px);
        text-decoration: none;
        color: white;
    }

    .profile-header {
        text-align: center;
        color: white;
        margin-bottom: 3rem;
    }

    .profile-title {
        font-size: 3rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
    }

    .profile-subtitle {
        font-size: 1.125rem;
        opacity: 0.9;
    }

    .divider {
        height: 2px;
        background: linear-gradient(90deg, transparent, #e5e7eb, transparent);
        margin: 2rem 0;
        border: none;
    }

    .info-icon {
        width: 40px;
        height: 40px;
        border-radius: 0.5rem;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-right: 1rem;
        color: white;
        font-size: 1.25rem;
    }

    .username-icon { background: linear-gradient(135deg, #3b82f6, #1d4ed8); }
    .email-icon { background: linear-gradient(135deg, #10b981, #059669); }
    .role-icon { background: linear-gradient(135deg, #f59e0b, #d97706); }
    .created-icon { background: linear-gradient(135deg, #8b5cf6, #7c3aed); }

    .password-strength {
        margin-top: 0.5rem;
        height: 4px;
        background: #e5e7eb;
        border-radius: 2px;
        overflow: hidden;
        transition: all 0.3s ease;
    }

    .password-strength-bar {
        height: 100%;
        transition: all 0.3s ease;
        border-radius: 2px;
    }

    .strength-weak { background: linear-gradient(90deg, #ef4444, #dc2626); width: 33%; }
    .strength-medium { background: linear-gradient(90deg, #f59e0b, #d97706); width: 66%; }
    .strength-strong { background: linear-gradient(90deg, #10b981, #059669); width: 100%; }

    .floating-particles {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        z-index: -1;
    }

    .particle {
        position: absolute;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 50%;
        animation: float 6s ease-in-out infinite;
    }

    @@keyframes float {
        0%, 100% { transform: translateY(0px) rotate(0deg); opacity: 0.7; }
        50% { transform: translateY(-20px) rotate(180deg); opacity: 1; }
    }
</style>

<div class="floating-particles">
    <div class="particle" style="left: 10%; top: 20%; width: 8px; height: 8px; animation-delay: 0s;"></div>
    <div class="particle" style="left: 20%; top: 80%; width: 12px; height: 12px; animation-delay: 1s;"></div>
    <div class="particle" style="left: 80%; top: 10%; width: 6px; height: 6px; animation-delay: 2s;"></div>
    <div class="particle" style="left: 90%; top: 70%; width: 10px; height: 10px; animation-delay: 3s;"></div>
    <div class="particle" style="left: 50%; top: 50%; width: 4px; height: 4px; animation-delay: 4s;"></div>
</div>

<div class="container mx-auto px-4 py-8 max-w-4xl">
    <a href="/User/UserDashboard" class="back-button">
        <i class="fas fa-arrow-left mr-2"></i>
        Back to Dashboard
    </a>

    <div class="profile-header">
        <h1 class="profile-title">User Profile</h1>
        <p class="profile-subtitle">Manage your account information and security settings</p>
        <div class="w-32 h-1 bg-gradient-to-r from-blue-400 to-purple-400 rounded-full mx-auto mt-4"></div>
    </div>

    <div class="profile-container glass-effect rounded-3xl p-8">
        <!-- Avatar Section -->
        <div class="avatar-section">
            <div class="avatar-circle">
                @(Model.UserData?.Username?.Substring(0, 1).ToUpper() ?? "U")
            </div>
        </div>

        @if (!string.IsNullOrEmpty(Model.Message))
        {
            <div class="success-message">
                <i class="fas fa-check-circle mr-3 text-xl"></i>
                <span>@Model.Message</span>
            </div>
        }

        <!-- User Information Cards -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-8">
            <div class="info-card username">
                <div class="flex items-center">
                    <div class="info-icon username-icon">
                        <i class="fas fa-user"></i>
                    </div>
                    <div>
                        <p class="text-sm font-medium text-gray-500 mb-1">Username</p>
                        <p class="text-xl font-semibold text-gray-800">@Model.UserData?.Username</p>
                    </div>
                </div>
            </div>

            <div class="info-card email">
                <div class="flex items-center">
                    <div class="info-icon email-icon">
                        <i class="fas fa-envelope"></i>
                    </div>
                    <div>
                        <p class="text-sm font-medium text-gray-500 mb-1">Email Address</p>
                        <p class="text-xl font-semibold text-gray-800">@Model.UserData?.Email</p>
                    </div>
                </div>
            </div>

            <div class="info-card role">
                <div class="flex items-center">
                    <div class="info-icon role-icon">
                        <i class="fas fa-shield-alt"></i>
                    </div>
                    <div>
                        <p class="text-sm font-medium text-gray-500 mb-1">Role</p>
                        <p class="text-xl font-semibold text-gray-800">@Model.UserData?.Role</p>
                    </div>
                </div>
            </div>

            <div class="info-card created">
                <div class="flex items-center">
                    <div class="info-icon created-icon">
                        <i class="fas fa-calendar-plus"></i>
                    </div>
                    <div>
                        <p class="text-sm font-medium text-gray-500 mb-1">Member Since</p>
                        <p class="text-xl font-semibold text-gray-800">@Model.UserData?.CreatedAt.ToString("MMM dd, yyyy")</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="divider"></div>

        <!-- Password Update Section -->
        <div class="form-section">
            <div class="flex items-center mb-6">
                <div class="w-12 h-12 bg-gradient-to-r from-red-500 to-pink-500 rounded-lg flex items-center justify-center mr-4">
                    <i class="fas fa-key text-white text-xl"></i>
                </div>
                <div>
                    <h3 class="text-2xl font-bold text-gray-800">Security Settings</h3>
                    <p class="text-gray-600">Update your password to keep your account secure</p>
                </div>
            </div>

            <form method="post" class="space-y-6">
                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-lock text-blue-500"></i>
                        New Password
                    </label>
                    <div class="password-group">
                        <input asp-for="NewPassword" 
                               id="NewPassword" 
                               type="password" 
                               class="form-input" 
                               placeholder="Enter your new password"
                               oninput="checkPasswordStrength(this.value)" />
                        <span onclick="togglePassword('NewPassword', this)" class="password-toggle">
                            <i class="fas fa-eye" id="NewPasswordIcon"></i>
                        </span>
                    </div>
                    <div class="password-strength">
                        <div class="password-strength-bar" id="passwordStrengthBar"></div>
                    </div>
                    <p class="text-sm text-gray-500 mt-1" id="passwordStrengthText">Password strength will be shown here</p>
                </div>

                <div class="form-group">
                    <label class="form-label">
                        <i class="fas fa-lock text-green-500"></i>
                        Confirm Password
                    </label>
                    <div class="password-group">
                        <input asp-for="ConfirmPassword" 
                               id="ConfirmPassword" 
                               type="password" 
                               class="form-input" 
                               placeholder="Confirm your new password"
                               oninput="checkPasswordMatch()" />
                        <span onclick="togglePassword('ConfirmPassword', this)" class="password-toggle">
                            <i class="fas fa-eye" id="ConfirmPasswordIcon"></i>
                        </span>
                    </div>
                    <p class="text-sm mt-1" id="passwordMatchText"></p>
                </div>

                <button type="submit" class="btn-update">
                    <i class="fas fa-shield-alt mr-2"></i>
                    Update Password
                </button>

                @if (!ViewData.ModelState.IsValid)
                {
                    <div class="error-message">
                        <i class="fas fa-exclamation-triangle mr-3 text-xl"></i>
                        <span>Please fix the validation errors above.</span>
                    </div>
                }
            </form>
        </div>

        <!-- Security Tips -->
        <div class="form-section">
            <div class="flex items-center mb-4">
                <div class="w-12 h-12 bg-gradient-to-r from-yellow-500 to-orange-500 rounded-lg flex items-center justify-center mr-4">
                    <i class="fas fa-lightbulb text-white text-xl"></i>
                </div>
                <h3 class="text-xl font-bold text-gray-800">Security Tips</h3>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div class="flex items-start space-x-3">
                    <i class="fas fa-check-circle text-green-500 mt-1"></i>
                    <p class="text-sm text-gray-600">Use at least 8 characters with mixed case letters</p>
                </div>
                <div class="flex items-start space-x-3">
                    <i class="fas fa-check-circle text-green-500 mt-1"></i>
                    <p class="text-sm text-gray-600">Include numbers and special characters</p>
                </div>
                <div class="flex items-start space-x-3">
                    <i class="fas fa-check-circle text-green-500 mt-1"></i>
                    <p class="text-sm text-gray-600">Avoid using personal information</p>
                </div>
                <div class="flex items-start space-x-3">
                    <i class="fas fa-check-circle text-green-500 mt-1"></i>
                    <p class="text-sm text-gray-600">Change password regularly</p>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function togglePassword(inputId, btn) {
            const input = document.getElementById(inputId);
            const icon = document.getElementById(inputId + 'Icon');
            
            if (input.type === "password") {
                input.type = "text";
                icon.className = "fas fa-eye-slash";
                btn.style.color = "#3b82f6";
            } else {
                input.type = "password";
                icon.className = "fas fa-eye";
                btn.style.color = "#6b7280";
            }
        }

        function checkPasswordStrength(password) {
            const strengthBar = document.getElementById('passwordStrengthBar');
            const strengthText = document.getElementById('passwordStrengthText');
            
            if (password.length === 0) {
                strengthBar.className = 'password-strength-bar';
                strengthBar.style.width = '0%';
                strengthText.textContent = 'Password strength will be shown here';
                strengthText.className = 'text-sm text-gray-500 mt-1';
                return;
            }
            
            let strength = 0;
            let feedback = [];
            
            // Length check
            if (password.length >= 8) {
                strength += 1;
                feedback.push('✓ Good length');
            } else {
                feedback.push('✗ At least 8 characters needed');
            }
            
            // Character variety checks
            if (/[a-z]/.test(password)) strength += 0.5;
            if (/[A-Z]/.test(password)) strength += 0.5;
            if (/[0-9]/.test(password)) strength += 0.5;
            if (/[^A-Za-z0-9]/.test(password)) strength += 0.5;
            
            // Set strength level
            if (strength <= 1.5) {
                strengthBar.className = 'password-strength-bar strength-weak';
                strengthText.textContent = '⚠️ Weak password';
                strengthText.className = 'text-sm text-red-500 mt-1';
            } else if (strength <= 2.5) {
                strengthBar.className = 'password-strength-bar strength-medium';
                strengthText.textContent = '⚡ Medium strength';
                strengthText.className = 'text-sm text-orange-500 mt-1';
            } else {
                strengthBar.className = 'password-strength-bar strength-strong';
                strengthText.textContent = '🔒 Strong password';
                strengthText.className = 'text-sm text-green-500 mt-1';
            }
            
            checkPasswordMatch();
        }
        
        function checkPasswordMatch() {
            const password = document.getElementById('NewPassword').value;
            const confirmPassword = document.getElementById('ConfirmPassword').value;
            const matchText = document.getElementById('passwordMatchText');
            
            if (confirmPassword.length === 0) {
                matchText.textContent = '';
                return;
            }
            
            if (password === confirmPassword) {
                matchText.textContent = '✅ Passwords match';
                matchText.className = 'text-sm text-green-500 mt-1';
            } else {
                matchText.textContent = '❌ Passwords do not match';
                matchText.className = 'text-sm text-red-500 mt-1';
            }
        }

        // Add keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey && e.key === 's') {
                e.preventDefault();
                document.querySelector('form').submit();
            }
        });

        // Auto-hide success message
        setTimeout(() => {
            const successMsg = document.querySelector('.success-message');
            if (successMsg) {
                successMsg.style.animation = 'slideUp 0.5s ease-out reverse';
                setTimeout(() => successMsg.remove(), 500);
            }
        }, 3000);
    </script>
}

<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">