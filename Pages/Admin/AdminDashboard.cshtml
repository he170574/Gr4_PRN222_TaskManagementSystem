@page
@model CMS2.Pages.Admin.AdminDashboardModel
@using CMS2.Models
@{
    Layout = null;
    ViewData["Title"] = "Admin Dashboard";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - CMS2</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@2"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            --success-gradient: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
            --warning-gradient: linear-gradient(135deg, #43e97b 0%, #38f9d7 100%);
            --danger-gradient: linear-gradient(135deg, #fa709a 0%, #fee140 100%);
            --dark-gradient: linear-gradient(135deg, #2c3e50 0%, #3498db 100%);
            
            --bg-primary: #f8fafc;
            --bg-secondary: #ffffff;
            --text-primary: #1e293b;
            --text-secondary: #64748b;
            --border-color: #e2e8f0;
            --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
            --shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
            --shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            --shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: var(--bg-primary);
            color: var(--text-primary);
            line-height: 1.6;
            overflow-x: hidden;
        }

        .dashboard-container {
            min-height: 100vh;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 20px;
        }

        .dashboard-content {
            max-width: 1400px;
            margin: 0 auto;
        }

        /* Header Section */
        .dashboard-header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 30px 40px;
            margin-bottom: 30px;
            box-shadow: var(--shadow-xl);
            border: 1px solid rgba(255, 255, 255, 0.2);
            display: flex;
            justify-content: space-between;
            align-items: center;
            animation: slideDown 0.8s ease-out;
        }

        @@keyframes slideDown {
            from { opacity: 0; transform: translateY(-30px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .header-title {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .header-title h1 {
            font-size: 32px;
            font-weight: 800;
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .header-title .dashboard-icon {
            width: 50px;
            height: 50px;
            background: var(--primary-gradient);
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
            box-shadow: var(--shadow-md);
        }

        .sign-out-btn {
            background: var(--danger-gradient);
            color: white;
            padding: 12px 24px;
            border-radius: 12px;
            text-decoration: none;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            box-shadow: var(--shadow-md);
        }

        .sign-out-btn:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-xl);
            color: white;
            text-decoration: none;
        }

        /* Success Message */
        .success-message {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
            padding: 16px 24px;
            border-radius: 16px;
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 12px;
            box-shadow: var(--shadow-lg);
            animation: slideIn 0.5s ease-out;
        }

        @@keyframes slideIn {
            from { opacity: 0; transform: translateX(-30px); }
            to { opacity: 1; transform: translateX(0); }
        }

        /* Action Buttons */
        .action-buttons {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: var(--shadow-xl);
            border: 1px solid rgba(255, 255, 255, 0.2);
            animation: slideUp 0.8s ease-out 0.2s both;
        }

        @@keyframes slideUp {
            from { opacity: 0; transform: translateY(30px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .buttons-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
        }

        .action-btn {
            background: var(--primary-gradient);
            color: white;
            padding: 16px 24px;
            border-radius: 16px;
            text-decoration: none;
            font-weight: 600;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            transition: all 0.3s ease;
            box-shadow: var(--shadow-md);
            position: relative;
            overflow: hidden;
        }

        .action-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        .action-btn:hover::before {
            left: 100%;
        }

        .action-btn:hover {
            transform: translateY(-3px);
            box-shadow: var(--shadow-xl);
            color: white;
            text-decoration: none;
        }

        .action-btn.secondary {
            background: var(--success-gradient);
        }

        .action-btn.tertiary {
            background: var(--warning-gradient);
        }

        /* Chart Section */
        .chart-section {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: var(--shadow-xl);
            border: 1px solid rgba(255, 255, 255, 0.2);
            animation: slideUp 0.8s ease-out 0.4s both;
        }

        .chart-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        .chart-title {
            font-size: 24px;
            font-weight: 700;
            color: var(--text-primary);
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .toggle-chart-btn {
            background: var(--dark-gradient);
            color: white;
            padding: 12px 20px;
            border: none;
            border-radius: 12px;
            font-weight: 600;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            box-shadow: var(--shadow-md);
        }

        .toggle-chart-btn:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-lg);
        }

        .chart-container {
            background: white;
            padding: 30px;
            border-radius: 16px;
            box-shadow: var(--shadow-sm);
            border: 1px solid var(--border-color);
        }

        /* User Management Section */
        .user-management {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: var(--shadow-xl);
            border: 1px solid rgba(255, 255, 255, 0.2);
            animation: slideUp 0.8s ease-out 0.6s both;
        }

        .section-title {
            font-size: 28px;
            font-weight: 700;
            color: var(--text-primary);
            margin-bottom: 30px;
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .section-title::before {
            content: '';
            width: 4px;
            height: 40px;
            background: var(--primary-gradient);
            border-radius: 2px;
        }

        .table-container {
            overflow-x: auto;
            border-radius: 16px;
            box-shadow: var(--shadow-md);
            border: 1px solid var(--border-color);
        }

        .users-table {
            width: 100%;
            border-collapse: collapse;
            background: white;
        }

        .users-table thead {
            background: linear-gradient(135deg, #f8fafc, #e2e8f0);
        }

        .users-table th {
            padding: 20px 16px;
            text-align: left;
            font-weight: 600;
            color: var(--text-primary);
            border-bottom: 2px solid var(--border-color);
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .users-table td {
            padding: 16px;
            border-bottom: 1px solid var(--border-color);
            transition: all 0.3s ease;
        }

        .users-table tbody tr {
            transition: all 0.3s ease;
        }

        .users-table tbody tr:hover {
            background: linear-gradient(135deg, #f8fafc, #f1f5f9);
            transform: scale(1.01);
            box-shadow: var(--shadow-sm);
        }

        .user-id {
            font-weight: 600;
            color: var(--text-primary);
            background: linear-gradient(135deg, #e2e8f0, #cbd5e1);
            padding: 6px 12px;
            border-radius: 8px;
            font-size: 12px;
            display: inline-block;
            min-width: 40px;
            text-align: center;
        }

        .username {
            font-weight: 600;
            color: var(--text-primary);
        }

        .email {
            color: var(--text-secondary);
            font-size: 14px;
        }

        .task-count {
            background: var(--primary-gradient);
            color: white;
            padding: 6px 12px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 12px;
            display: inline-block;
            min-width: 30px;
            text-align: center;
        }

        .actions {
            display: flex;
            gap: 12px;
            flex-wrap: wrap;
        }

        .action-link {
            padding: 8px 12px;
            border-radius: 8px;
            text-decoration: none;
            font-weight: 500;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .action-link.view {
            background: linear-gradient(135deg, #3b82f6, #1d4ed8);
            color: white;
        }

        .action-link.edit {
            background: linear-gradient(135deg, #f59e0b, #d97706);
            color: white;
        }

        .action-link.add {
            background: linear-gradient(135deg, #10b981, #059669);
            color: white;
        }

        .action-link:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
            color: white;
            text-decoration: none;
        }

        /* Stats Cards */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 16px;
            padding: 24px;
            box-shadow: var(--shadow-lg);
            border: 1px solid rgba(255, 255, 255, 0.2);
            position: relative;
            overflow: hidden;
            animation: slideUp 0.8s ease-out calc(0.1s * var(--delay)) both;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: var(--gradient);
        }

        .stat-icon {
            width: 50px;
            height: 50px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            color: white;
            background: var(--gradient);
            margin-bottom: 16px;
        }

        .stat-value {
            font-size: 32px;
            font-weight: 800;
            color: var(--text-primary);
            margin-bottom: 8px;
        }

        .stat-label {
            color: var(--text-secondary);
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            font-size: 12px;
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .dashboard-container {
                padding: 10px;
            }

            .dashboard-header {
                flex-direction: column;
                gap: 20px;
                text-align: center;
                padding: 20px;
            }

            .header-title h1 {
                font-size: 24px;
            }

            .buttons-grid {
                grid-template-columns: 1fr;
            }

            .chart-header {
                flex-direction: column;
                gap: 15px;
            }

            .actions {
                justify-content: center;
            }

            .users-table th,
            .users-table td {
                padding: 12px 8px;
                font-size: 12px;
            }
        }

        /* Loading Animation */
        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        .loading::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 20px;
            height: 20px;
            margin: -10px 0 0 -10px;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @@keyframes spin {
            to { transform: rotate(360deg); }
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <div class="dashboard-content">
            <!-- Header Section -->
            <div class="dashboard-header">
                <div class="header-title">
                    <div class="dashboard-icon">
                        <i class="fas fa-tachometer-alt"></i>
                    </div>
                    <h1>Admin Dashboard</h1>
                </div>
                <a href="/Account/SignOut" class="sign-out-btn">
                    <i class="fas fa-sign-out-alt"></i>
                    Sign Out
                </a>
            </div>

            <!-- Success Message -->
            @if (TempData["SuccessMessage"] != null)
            {
                <div id="successMessage" class="success-message">
                    <i class="fas fa-check-circle"></i>
                    <span><strong>Success!</strong> @TempData["SuccessMessage"]</span>
                </div>

                <script>
                    setTimeout(() => {
                        const msg = document.getElementById('successMessage');
                        if (msg) {
                            msg.style.opacity = '0';
                            msg.style.transform = 'translateX(-100%)';
                            setTimeout(() => msg.remove(), 500);
                        }
                    }, 4000);
                </script>
            }

            <!-- Stats Cards -->
            <div class="stats-grid">
                <div class="stat-card" style="--gradient: var(--primary-gradient); --delay: 1;">
                    <div class="stat-icon" style="background: var(--primary-gradient);">
                        <i class="fas fa-users"></i>
                    </div>
                    <div class="stat-value">@Model.Users.Count()</div>
                    <div class="stat-label">Total Users</div>
                </div>
                <div class="stat-card" style="--gradient: var(--success-gradient); --delay: 2;">
                    <div class="stat-icon" style="background: var(--success-gradient);">
                        <i class="fas fa-tasks"></i>
                    </div>
                    <div class="stat-value">@Model.ChartData.Sum()</div>
                    <div class="stat-label">Total Tasks</div>
                </div>
                <div class="stat-card" style="--gradient: var(--warning-gradient); --delay: 3;">
                    <div class="stat-icon" style="background: var(--warning-gradient);">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="stat-value">@(Model.ChartLabels.Contains("Pending") ? Model.ChartData[Array.IndexOf(Model.ChartLabels.ToArray(), "Pending")] : 0)</div>
                    <div class="stat-label">Pending Tasks</div>
                </div>
                <div class="stat-card" style="--gradient: var(--secondary-gradient); --delay: 4;">
                    <div class="stat-icon" style="background: var(--secondary-gradient);">
                        <i class="fas fa-check"></i>
                    </div>
                    <div class="stat-value">@(Model.ChartLabels.Contains("Completed") ? Model.ChartData[Array.IndexOf(Model.ChartLabels.ToArray(), "Completed")] : 0)</div>
                    <div class="stat-label">Completed Tasks</div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="action-buttons">
                <div class="buttons-grid">
                    <a asp-page="/Admin/BulkEmail" class="action-btn">
                        <i class="fas fa-envelope"></i>
                        Send Mail
                    </a>
                    <a asp-page="/Admin/EmailHistory" class="action-btn secondary">
                        <i class="fas fa-history"></i>
                        Email History
                    </a>
                    <a href="#" class="action-btn tertiary">
                        <i class="fas fa-cog"></i>
                        Settings
                    </a>
                </div>
            </div>

            <!-- Chart Section -->
            <div class="chart-section">
                <div class="chart-header">
                    <h2 class="chart-title">
                        <i class="fas fa-chart-bar"></i>
                        Task Analytics
                    </h2>
                    <button id="toggleChartType" class="toggle-chart-btn">
                        <i class="fas fa-exchange-alt"></i>
                        Switch Chart Type
                    </button>
                </div>
                <div class="chart-container">
                    <canvas id="taskChart"></canvas>
                </div>
            </div>

            <!-- User Management Section -->
            <div class="user-management">
                <h2 class="section-title">
                    <i class="fas fa-users-cog"></i>
                    User Management
                </h2>
                <div class="table-container">
                    <table class="users-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Username</th>
                                <th>Email</th>
                                <th>Tasks</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var user in Model.Users)
                            {
                                var taskCount = Model.UserTaskCounts.ContainsKey(user.Id) ? Model.UserTaskCounts[user.Id] : 0;
                                <tr>
                                    <td><span class="user-id">@user.Id</span></td>
                                    <td><span class="username">@user.Username</span></td>
                                    <td><span class="email">@user.Email</span></td>
                                    <td><span class="task-count">@taskCount</span></td>
                                    <td>
                                        <div class="actions">
                                            <a href="/Admin/UserDetails?id=@user.Id" class="action-link view">
                                                <i class="fas fa-eye"></i>
                                                View
                                            </a>
                                            <a href="/Admin/ChangeTask?userId=@user.Id" class="action-link edit">
                                                <i class="fas fa-edit"></i>
                                                Edit
                                            </a>
                                            <a href="/Tasks/Create?userId=@user.Id" class="action-link add">
                                                <i class="fas fa-plus"></i>
                                                Add Task
                                            </a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentChartType = 'bar';
        const ctx = document.getElementById('taskChart').getContext('2d');
        
        const chartData = {
            labels: @Html.Raw(Json.Serialize(Model.ChartLabels)),
            datasets: [{
                label: 'Task Count by Status',
                data: @Html.Raw(Json.Serialize(Model.ChartData)),
                backgroundColor: @Html.Raw(Json.Serialize(Model.ChartLabels.Select(label =>
                    label == "Completed" ? "#10b981" :
                    label == "In Progress" ? "#f59e0b" :
                    label == "Pending" ? "#f97316" : "#6366f1"
                ).ToList())),
                borderWidth: 0,
                borderRadius: 8,
                borderSkipped: false,
            }]
        };

        let chart = new Chart(ctx, {
            type: currentChartType,
            data: chartData,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: { 
                        display: true,
                        position: 'bottom',
                        labels: {
                            padding: 20,
                            usePointStyle: true,
                            font: {
                                family: 'Inter',
                                size: 12,
                                weight: '500'
                            }
                        }
                    },
                    datalabels: {
                        color: '#ffffff',
                        font: {
                            weight: 'bold',
                            size: 14
                        },
                        formatter: (value, context) => {
                            if (currentChartType === 'pie') {
                                const sum = context.chart._metasets[0].total;
                                const percentage = (value / sum * 100).toFixed(1) + '%';
                                return percentage;
                            } else {
                                return value;
                            }
                        },
                        anchor: 'center',
                        align: 'center'
                    }
                },
                scales: currentChartType === 'bar' ? {
                    y: { 
                        beginAtZero: true, 
                        ticks: { 
                            stepSize: 1,
                            font: {
                                family: 'Inter'
                            }
                        },
                        grid: {
                            color: 'rgba(0, 0, 0, 0.1)'
                        }
                    },
                    x: {
                        ticks: {
                            font: {
                                family: 'Inter'
                            }
                        },
                        grid: {
                            display: false
                        }
                    }
                } : {}
            },
            plugins: [ChartDataLabels]
        });

        // Set chart container height
        document.getElementById('taskChart').style.height = '400px';

        document.getElementById("toggleChartType").addEventListener("click", (e) => {
            e.target.classList.add('loading');
            
            setTimeout(() => {
                chart.destroy();
                currentChartType = currentChartType === 'bar' ? 'pie' : 'bar';
                
                chart = new Chart(ctx, {
                    type: currentChartType,
                    data: chartData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: { 
                                display: true,
                                position: 'bottom',
                                labels: {
                                    padding: 20,
                                    usePointStyle: true,
                                    font: {
                                        family: 'Inter',
                                        size: 12,
                                        weight: '500'
                                    }
                                }
                            },
                            datalabels: {
                                color: currentChartType === 'pie' ? '#ffffff' : '#ffffff',
                                font: {
                                    weight: 'bold',
                                    size: 14
                                },
                                formatter: (value, context) => {
                                    if (currentChartType === 'pie') {
                                        const sum = context.chart._metasets[0].total;
                                        const percentage = (value / sum * 100).toFixed(1) + '%';
                                        return percentage;
                                    } else {
                                        return value;
                                    }
                                },
                                anchor: 'center',
                                align: 'center'
                            }
                        },
                        scales: currentChartType === 'bar' ? {
                            y: { 
                                beginAtZero: true, 
                                ticks: { 
                                    stepSize: 1,
                                    font: {
                                        family: 'Inter'
                                    }
                                },
                                grid: {
                                    color: 'rgba(0, 0, 0, 0.1)'
                                }
                            },
                            x: {
                                ticks: {
                                    font: {
                                        family: 'Inter'
                                    }
                                },
                                grid: {
                                    display: false
                                }
                            }
                        } : {}
                    },
                    plugins: [ChartDataLabels]
                });
                
                e.target.classList.remove('loading');
            }, 300);
        });

        // Add smooth scrolling for internal links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                document.querySelector(this.getAttribute('href')).scrollIntoView({
                    behavior: 'smooth'
                });
            });
        });
    </script>
</body>
</html>