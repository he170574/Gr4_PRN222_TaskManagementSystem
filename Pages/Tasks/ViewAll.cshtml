@page
@model CMS2.Pages.Tasks.ViewAllModel
@using System.Globalization
@{
    Layout = null;
    ViewData["Title"] = "View All Tasks";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Task Manager</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .glass-effect {
            backdrop-filter: blur(15px);
            background: rgba(255, 255, 255, 0.95);
            border: 1px solid rgba(255, 255, 255, 0.3);
        }
        .task-card {
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }
        .task-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 12px 30px rgba(0, 0, 0, 0.15);
        }
        .task-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: var(--status-color);
        }
        .filter-card {
            transition: all 0.3s ease;
        }
        .filter-card:focus-within {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
        }
        .status-column {
            animation: slideUp 0.6s ease-out;
        }
        @@keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        .floating-search {
            position: relative;
        }
        .search-icon {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: #6b7280;
        }
        .search-input {
            padding-left: 2.5rem;
        }
        .priority-badge {
            animation: pulse 2s infinite;
        }
        .export-btn {
            transition: all 0.3s ease;
        }
        .export-btn:hover {
            transform: translateX(2px);
        }
        .empty-state {
            opacity: 0.7;
            transition: opacity 0.3s ease;
        }
        .empty-state:hover {
            opacity: 1;
        }
        .task-actions {
            opacity: 0;
            transform: translateY(10px);
            transition: all 0.3s ease;
        }
        .task-card:hover .task-actions {
            opacity: 1;
            transform: translateY(0);
        }
        .stats-card {
            background: linear-gradient(135deg, rgba(255,255,255,0.9) 0%, rgba(255,255,255,0.7) 100%);
        }
    </style>
</head>
<body class="gradient-bg min-h-screen">
    <div class="container mx-auto px-4 py-8">
        <!-- Header Section -->
        <div class="text-center mb-8">
            <div class="inline-flex items-center justify-center w-20 h-20 bg-white bg-opacity-20 rounded-full mb-4">
                <i class="fas fa-tasks text-3xl text-white"></i>
            </div>
            <h1 class="text-5xl font-bold text-white mb-2">Task Manager</h1>
            <p class="text-blue-100 text-lg">Organize your tasks by status and stay productive</p>
            <div class="w-32 h-1 bg-gradient-to-r from-blue-400 to-purple-400 rounded-full mx-auto mt-4"></div>
        </div>

        <!-- Navigation -->
        <div class="flex justify-between items-center mb-8">
            <div class="flex items-center space-x-4">
                <a asp-page="/User/UserDashboard" 
                   class="inline-flex items-center px-4 py-2 bg-white bg-opacity-20 text-white rounded-lg hover:bg-opacity-30 transition-all duration-200">
                    <i class="fas fa-home mr-2"></i>
                    Dashboard
                </a>
                <button onclick="toggleView()" 
                        class="inline-flex items-center px-4 py-2 bg-white bg-opacity-20 text-white rounded-lg hover:bg-opacity-30 transition-all duration-200">
                    <i class="fas fa-th mr-2" id="viewToggleIcon"></i>
                    <span id="viewToggleText">Grid View</span>
                </button>
            </div>
            <div class="text-white text-sm">
                <i class="fas fa-clock mr-1"></i>
                <span id="currentTime"></span>
            </div>
        </div>

        <!-- Filter Section -->
        <div class="glass-effect rounded-2xl p-6 mb-8 shadow-lg">
            <div class="flex items-center mb-4">
                <i class="fas fa-filter text-blue-600 text-xl mr-3"></i>
                <h2 class="text-xl font-semibold text-gray-800">Filter & Search</h2>
            </div>
            
            <form method="get" class="space-y-4">
                <div class="grid grid-cols-1 lg:grid-cols-4 gap-4">
                    <!-- Search Input -->
                    <div class="lg:col-span-2">
                        <div class="floating-search">
                            <i class="fas fa-search search-icon"></i>
                            <input name="Filter.Keyword" 
                                   value="@Model.Filter.Keyword" 
                                   placeholder="Search tasks by title or description..."
                                   class="search-input w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" />
                        </div>
                    </div>
                    
                    <!-- Date Range -->
                    <div class="flex space-x-2">
                        <input type="date" 
                               name="Filter.StartDate" 
                               value="@Model.Filter.StartDate?.ToString("yyyy-MM-dd")"
                               class="flex-1 px-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" />
                        <input type="date" 
                               name="Filter.EndDate" 
                               value="@Model.Filter.EndDate?.ToString("yyyy-MM-dd")"
                               class="flex-1 px-3 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200" />
                    </div>
                    
                    <!-- Filter Button -->
                    <button type="submit" 
                            class="bg-gradient-to-r from-blue-500 to-blue-600 text-white px-6 py-3 rounded-lg hover:from-blue-600 hover:to-blue-700 transform hover:scale-105 transition-all duration-200 font-semibold shadow-lg">
                        <i class="fas fa-search mr-2"></i>
                        Apply Filter
                    </button>
                </div>

                <!-- Export Options -->
                <div class="flex flex-wrap gap-3 pt-4 border-t border-gray-200">
                    <span class="text-gray-600 font-medium">Export Options:</span>
                    <a asp-page="/Tasks/Export" asp-route-format="csv" 
                       class="export-btn inline-flex items-center px-4 py-2 text-green-600 hover:text-green-700 hover:bg-green-50 rounded-lg transition-all duration-200">
                        <i class="fas fa-file-csv mr-2"></i>
                        Excel (CSV)
                    </a>
                    <a asp-page="/Tasks/Export" asp-route-format="pdf" 
                       class="export-btn inline-flex items-center px-4 py-2 text-red-600 hover:text-red-700 hover:bg-red-50 rounded-lg transition-all duration-200">
                        <i class="fas fa-file-pdf mr-2"></i>
                        PDF Report
                    </a>
                </div>
            </form>
        </div>

        <!-- Stats Overview -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            @{
                var totalTasks = Model.GroupedTasks.Values.Sum(tasks => tasks.Count());
                var pendingCount = Model.GroupedTasks.ContainsKey("Pending") ? Model.GroupedTasks["Pending"].Count() : 0;
                var inProgressCount = Model.GroupedTasks.ContainsKey("In Progress") ? Model.GroupedTasks["In Progress"].Count() : 0;
                var completedCount = Model.GroupedTasks.ContainsKey("Completed") ? Model.GroupedTasks["Completed"].Count() : 0;
            }
            
            <div class="stats-card rounded-xl p-6 shadow-lg">
                <div class="flex items-center justify-between">
                    <div>
                        <h3 class="text-2xl font-bold text-gray-800">@totalTasks</h3>
                        <p class="text-gray-600">Total Tasks</p>
                    </div>
                    <div class="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center">
                        <i class="fas fa-list text-blue-600 text-xl"></i>
                    </div>
                </div>
            </div>

            <div class="stats-card rounded-xl p-6 shadow-lg">
                <div class="flex items-center justify-between">
                    <div>
                        <h3 class="text-2xl font-bold text-gray-800">@(inProgressCount + pendingCount)</h3>
                        <p class="text-gray-600">Active Tasks</p>
                    </div>
                    <div class="w-12 h-12 bg-orange-100 rounded-full flex items-center justify-center">
                        <i class="fas fa-clock text-orange-600 text-xl"></i>
                    </div>
                </div>
            </div>

            <div class="stats-card rounded-xl p-6 shadow-lg">
                <div class="flex items-center justify-between">
                    <div>
                        <h3 class="text-2xl font-bold text-gray-800">@Math.Round(totalTasks > 0 ? (completedCount * 100.0 / totalTasks) : 0)%</h3>
                        <p class="text-gray-600">Completion Rate</p>
                    </div>
                    <div class="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center">
                        <i class="fas fa-chart-pie text-green-600 text-xl"></i>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tasks Grid -->
        <div id="tasksGrid" class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            @foreach (var status in new[] { "Pending", "In Progress", "Completed" })
            {
                <div class="status-column" style="animation-delay: @(Array.IndexOf(new[] { "Pending", "In Progress", "Completed" }, status) * 0.2)s;">
                    <div class="glass-effect rounded-2xl overflow-hidden shadow-lg h-fit">
                        <!-- Column Header -->
                        <div class="p-6 border-b border-gray-200" style="background: linear-gradient(135deg, @(GetStatusGradient(status)));">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center space-x-3">
                                    <div class="w-10 h-10 rounded-full flex items-center justify-center" style="background: @Model.GetColor(status);">
                                        <i class="fas @GetStatusIcon(status) text-white"></i>
                                    </div>
                                    <div>
                                        <h2 class="text-xl font-bold text-white">@status</h2>
                                        <p class="text-white text-opacity-80 text-sm">
                                            @(Model.GroupedTasks.ContainsKey(status) ? Model.GroupedTasks[status].Count() : 0) tasks
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Tasks List -->
                        <div class="p-6">
                            @if (!Model.GroupedTasks.ContainsKey(status) || !Model.GroupedTasks[status].Any())
                            {
                                <div class="empty-state text-center py-12">
                                    <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                                        <i class="fas fa-inbox text-2xl text-gray-400"></i>
                                    </div>
                                    <p class="text-gray-500 font-medium">No @status.ToLower() tasks</p>
                                    <p class="text-gray-400 text-sm mt-1">Tasks will appear here when available</p>
                                </div>
                            }
                            else
                            {
                                <div class="space-y-4">
                                    @foreach (var task in Model.GroupedTasks[status])
                                    {
                                        <div class="task-card bg-white rounded-xl shadow-md hover:shadow-xl p-5" 
                                             style="--status-color: @Model.GetColor(status);">
                                            
                                            <!-- Task Header -->
                                            <div class="flex items-start justify-between mb-3">
                                                <div class="flex-1">
                                                    <h4 class="font-semibold text-gray-800 text-lg leading-tight mb-1">
                                                        @task.Title
                                                    </h4>
                                                    @if (!string.IsNullOrEmpty(task.Description))
                                                    {
                                                        <p class="text-gray-600 text-sm line-clamp-2">@task.Description</p>
                                                    }
                                                </div>
                                                <div class="priority-badge w-3 h-3 rounded-full ml-3 flex-shrink-0" 
                                                     style="background: @GetPriorityColor("Medium");"></div>
                                            </div>

                                            <!-- Task Details -->
                                            <div class="space-y-2 mb-4">
                                                <div class="flex items-center text-sm text-gray-500">
                                                    <i class="fas fa-calendar-alt mr-2 w-4"></i>
                                                    <span>Due: @task.DueDate.ToString("MMM dd, yyyy 'at' hh:mm tt", CultureInfo.InvariantCulture)</span>
                                                </div>
                                                <div class="flex items-center text-sm text-gray-500">
                                                    <i class="fas fa-clock mr-2 w-4"></i>
                                                    <span class="@(task.DueDate < DateTime.Now ? "text-red-500 font-medium" : "")">
                                                        @GetTimeRemaining(task.DueDate)
                                                    </span>
                                                </div>
                                            </div>

                                            <!-- Task Actions -->
                                            <div class="task-actions flex items-center justify-between pt-3 border-t border-gray-100">
                                                <div class="flex items-center space-x-3">
                                                    <a asp-page="/Tasks/View" asp-route-id="@task.Id" 
                                                       class="inline-flex items-center px-3 py-1 text-xs font-medium bg-blue-100 text-blue-600 rounded-full hover:bg-blue-200 transition-colors">
                                                        <i class="fas fa-eye mr-1"></i>
                                                        View
                                                    </a>
                                                    <a asp-page="/Tasks/Edit" asp-route-id="@task.Id" 
                                                       class="inline-flex items-center px-3 py-1 text-xs font-medium bg-green-100 text-green-600 rounded-full hover:bg-green-200 transition-colors">
                                                        <i class="fas fa-edit mr-1"></i>
                                                        Edit
                                                    </a>
                                                </div>
                                                <a asp-page="/Tasks/Delete" asp-route-id="@task.Id" 
                                                   class="inline-flex items-center px-3 py-1 text-xs font-medium bg-red-100 text-red-600 rounded-full hover:bg-red-200 transition-colors">
                                                    <i class="fas fa-trash mr-1"></i>
                                                    Delete
                                                </a>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Add New Task FAB -->
        <div class="fixed bottom-6 right-6">
            <a asp-page="/Tasks/Create" 
               class="inline-flex items-center justify-center w-14 h-14 bg-gradient-to-r from-blue-500 to-purple-600 text-white rounded-full shadow-lg hover:shadow-xl transform hover:scale-110 transition-all duration-300">
                <i class="fas fa-plus text-xl"></i>
            </a>
        </div>
    </div>

    <script>
        // Update current time
        function updateTime() {
            const now = new Date();
            document.getElementById('currentTime').textContent = now.toLocaleTimeString();
        }
        updateTime();
        setInterval(updateTime, 1000);

        // Toggle view (Grid/List)
        let isGridView = true;
        function toggleView() {
            const grid = document.getElementById('tasksGrid');
            const icon = document.getElementById('viewToggleIcon');
            const text = document.getElementById('viewToggleText');
            
            if (isGridView) {
                grid.className = 'space-y-6';
                icon.className = 'fas fa-th-list mr-2';
                text.textContent = 'List View';
                isGridView = false;
            } else {
                grid.className = 'grid grid-cols-1 lg:grid-cols-3 gap-8';
                icon.className = 'fas fa-th mr-2';
                text.textContent = 'Grid View';
                isGridView = true;
            }
        }

        // Auto-refresh tasks every 5 minutes
        setInterval(() => {
            if (confirm('Refresh tasks to see latest updates?')) {
                location.reload();
            }
        }, 300000);

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.ctrlKey && e.key === 'f') {
                e.preventDefault();
                document.querySelector('input[name="Filter.Keyword"]').focus();
            }
            if (e.key === 'Escape') {
                document.querySelector('input[name="Filter.Keyword"]').blur();
            }
        });
    </script>
</body>
</html>

@functions {
    string GetStatusIcon(string status)
    {
        return status switch
        {
            "Pending" => "fa-clock",
            "In Progress" => "fa-spinner",
            "Completed" => "fa-check-circle",
            _ => "fa-question"
        };
    }

    string GetStatusGradient(string status)
    {
        return status switch
        {
            "Pending" => "#f59e0b 0%, #d97706 100%",
            "In Progress" => "#3b82f6 0%, #1d4ed8 100%",
            "Completed" => "#10b981 0%, #059669 100%",
            _ => "#6b7280 0%, #4b5563 100%"
        };
    }

    string GetPriorityColor(string priority)
    {
        return priority switch
        {
            "High" => "#ef4444",
            "Medium" => "#f59e0b",
            "Low" => "#10b981",
            _ => "#6b7280"
        };
    }

    string GetTimeRemaining(DateTime dueDate)
    {
        var timeSpan = dueDate - DateTime.Now;
        if (timeSpan.TotalDays < 0)
            return "Overdue";
        if (timeSpan.TotalDays < 1)
            return $"Due in {timeSpan.Hours}h {timeSpan.Minutes}m";
        return $"Due in {timeSpan.Days} days";
    }
}